    1  screen
    2  screen list
    3  screen -list
    4  screen -r mlflow_exe
    5  screen -S mlflow_exe
    6  screen -list
    7  pip install mlflow
    8  mlflow server --host 0.0.0.0 --port 8100
    9  pip install mlflow
   10  mlflow server --host 0.0.0.0 --port 8100
   11  exit
   12  screen -list
   13  screen -r mlflow_exe
   14  screen list
   15  screen -list
   16  screen -S mlflow_exe
   17  screen -list
   18  screen -r mlflow_exe
   19  clear
   20  screen -r mlflow_exe
   21  screen -list
   22  clear
   23  screen -list
   24  screen -S mlflow_exe
   25  screen -list
   26  screen -r mlflow_exe
   27  screen -list
   28  clear
   29  screen -list
   30  screen -r mlflow_exe
   31  mlflow server --host 0.0.0.0 --port 8100
   32  screen list
   33  screen -list
   34  ls
   35  cd mlruns
   36  ls
   37  cd ..
   38  gsutil ls gs://mlops-bucket-week1/models/
   39  gs://mlops-course-true-sprite-459511-f5-unique/my-models/iris-classifier-week-1/model.joblib
   40  clear
   41  wget https://storage.googleapis.com/mlops-course-true-sprite-459511-f5-unique/my-models/iris-classifier-week-1/model.joblib
   42  clear
   43  wget https://storage.googleapis.com/mlops-course-true-sprite-459511-f5-unique/my-models/iris-classifier-week-1/model.joblib
   44  ls
   45  nano main.py
   46  ls
   47  uvicorn main:app --reload --host 0.0.0.0
   48  ls
   49  mkdir fast_iris
   50  mv main.py fast_iris
   51  mv model.joblib fast_iris
   52  ls
   53  mkdir docker_iris
   54  cd docker_iris
   55  ls
   56  ls -lh
   57  cp fast_iris/main.py docker_iris/
   58  cd ..
   59  cp fast_iris/main.py docker_iris/
   60  cp fast_iris/model.joblib docker_iris/
   61  ls
   62  cd docker_iris
   63  ls
   64  sudo usermod -aG docker $USER
   65  docker build main.py
   66  docker build -t main.py
   67  cat > requirements.txt <<EOF
   68  fastapi
   69  uvicorn
   70  scikit-learn
   71  joblib
   72  numpy
   73  pandas
   74  EOF
   75  ls
   76  cat > Dockerfile <<EOF
   77  # 1. Use official Python base image
   78  FROM python:3.10-slim
   79  # 2. Set working directory
   80  WORKDIR /app
   81  # 3. Copy files into container
   82  COPY . /app
   83  # 4. Install dependencies
   84  RUN pip install --no-cache-dir -r requirements.txt
   85  # 5. Expose port
   86  EXPOSE 8200
   87  # 6. Command to run the server
   88  CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8200"]
   89  EOF
   90  ls
   91  cd docker_iris
   92  ls
   93  docker build -t iris-api
   94  docker build -t iris-api .
   95  docker images
   96  docker run -d 8200:8200 --name iris-api-container iris-api
   97  docker run -d -p 8200:8200 --name iris-api-container iris-api
   98  docker logs d7ef5f28a531cc02bed10dc05f41ce6fa3c148ea2cef549c5bbfaf761f1c2788
   99  docker ps
  100  docker logs d7ef5f28a531cc02bed10dc05f41ce6fa3c148ea2cef549c5bbfaf761f1c2788
  101  script terminal_log.txt
  102  ls terminal_log.txt
  103  gcloud compute instances
  104  zip logs.zip terminal_log.txt
  105  gsutil cp logs.zip gs://<your-bucket-name>/
  106  gsutil cp logs.zip gs://mlops-course-true-sprite-459511-f5-unique/
  107  history
  108  docker ps
  109  docker stop iris-api-container
  110  docker ps
  111  echo "hi"
  112  ls
  113  cd docker_iris
  114  docker images
  115  gcloud services enable container.googleapis.com artifactregistry.googleapis.com
  116  clear
  117  gcloud auth configure-docker us-central1-docker.pkg.dev
  118  docker images 
  119  docker tag iris-api us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  120  docker push us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  121  gcloud artifacts repositories list --location=us-central1
  122  gcloud projects add-iam-policy-binding true-sprite-459511-f5   --member="user:sashiradhithya@gmail.com"   --role="roles/artifactregistry.admin"
  123  gcloud auth login
  124  gcloud config set account sashiradhithya@gmail.com
  125  gcloud projects add-iam-policy-binding true-sprite-459511-f5   --member="user:sashiradhithya@gmail.com"   --role="roles/artifactregistry.admin"
  126  gcloud artifacts repositories list --location=us-central1
  127  docker push us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  128  gcloud container clusters get-credentials week6-iris-workload --region=us-central1
  129  gcloud container clusters get-credentials week6-iris-gke-cluster --region=us-central1
  130  sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin
  131  gcloud container clusters get-credentials week6-iris-gke-cluster --region=us-central1
  132  kubectl get pods
  133  gcloud container clusters describe week6-iris-gke-cluster   --region=us-central1   --format="value(nodeConfig.serviceAccount)"
  134  gcloud projects add-iam-policy-binding true-sprite-459511-f5   --member="serviceAccount:89040534681-compute@developer.gserviceaccount.com"   --role="roles/artifactregistry.reader"
  135  kubectl delete pods -l app=week6-iris-workload
  136  kubectl get pods
  137  kubectl get service
  138  kubectl logs -l app=week6-iris-workload
  139  ls
  140  cd docker_iris
  141  ls
  142  nano ~/docker_iris/Dockerfile
  143  cd ~/docker_iris
  144  docker build -t iris-api .
  145  nano Dockerfile
  146  docker build -t iris-api .
  147  docker tag iris-api us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  148  docker push us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  149  kubectl set image deployment/week6-iris-workload     week6-iris-workload=us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  150  kubectl get deployment week6-iris-workload -o yaml | grep name:
  151  kubectl set image deployment/week6-iris-workload     iris-api-sha256-1=us-central1-docker.pkg.dev/true-sprite-459511-f5/my-repo/iris-api:latest
  152  kubectl rollout status deployment/week6-iris-workload
  153  kubectl get pods
  154  kubectl logs -l app=week6-iris-workload
  155  kubectl get service
  156  curl -X POST "http://34.57.111.203/predict/"      -H "Content-Type: application/json"      -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}'
  157  kubectl get pods
  158  kubectl logs week6-iris-workload-7fbb849b75-f92rf
  159  kubectl get service week6-iris-workload-service -o yaml > week6-iris-service.yaml
  160  ls
  161  nano week6-iris-service.yaml
  162  kubectl apply -f week6-iris-service.yaml
  163  curl -X POST "http://34.57.111.203/predict/"      -H "Content-Type: application/json"      -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}'
  164  gcloud container clusters list
  165  gcloud container node-pools list --cluster=week6-iris-gke-cluster 
  166  screen -list
  167  killall screen
  168  screen -S mlflow_oppe
  169  killall screen
  170  screen -l
  171  screen -list
  172  screen -S oppe1
  173  screen -list
  174  pip install mlflow
  175  mlflow server --host 0.0.0.0 --port 8100
  176  pip install mlflow
  177  screen -S mlflow_oppe
  178  ls
  179  cd fast_iris
  180  ls
  181  uvicorn main:app --reload --host 0.0.0.0
  182  vim main.py
  183  ls
  184  uvicorn main:app --reload --host 0.0.0.0
  185  nano main.py
  186  ls
  187  vim main.py
  188  ls
  189  uvicorn main:app --reload --host 0.0.0.0
  190  cd ..
  191  ls
  192  cd docker_iris
  193  ls
  194  cd ..
  195  vim Dockerfile
  196  ls
  197  cd docker_iris
  198  vim Dockerfile
  199  cd ..
  200  ls
  201  tree
  202  tree -d
  203  find . | sed 's|[^/]*/|  |g; s|-- |└-- |'
  204  find . -maxdepth 2 -type d
  205  find . -maxdepth 4 -type d
  206  find . -maxdepth 1 -type d
  207  ls
  208  find . -maxdepth 2 -type d
  209  find . -maxdepth 2
  210  ls -larth
  211  mkdir k8s
  212  ls
  213  cd k8s
  214  nano deployment.yaml
  215  ls
  216  nano service.yaml
  217  ls
  218  cd ..
  219  ls
  220  nano Dockerfile
  221  mkdir -p .github/workflows
  222  nano .github/workflows/cd.yml
  223  find . -maxdepth 2
  224  git init
  225  ls
  226  rm -rf .git
  227  ls
  228  mkdir iris-project
  229  ls
  230  mv Dockerfile k8s .github docker_iris fast_iris mlruns mlartifacts iris-project/
  231  ls
  232  cd iris-project
  233  git init
  234  git add .
  235  git commit -m "Initial commit of Iris deployment project"
  236  git config --global user.email "sashiradhithya@gmail.com"
  237  git config --global user.name "adhithyasash1"
  238  git commit -m "Initial commit of Iris deployment project"
  239  git remote add origin https://github.com/adhithyasash1/mlops-week6.git
  240  git push -u origin main
  241  git branch -M main
  242  git remote add origin https://github.com/adhithyasash1/mlops-week6.git
  243  git branch -M main
  244  git push -u origin main
  245  poetry init
  246  curl -sSL https://install.python-poetry.org | python3 -
  247  echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
  248  source ~/.bashrc
  249  poetry --version
  250  poetry init
  251  poetry add fastapi "uvicorn[standard]" scikit-learn pandas joblib
  252  git add pyproject.toml poetry.lock
  253  git commit -m "feat: Add project dependencies"
  254  git push
  255  ls
  256  gcloud projects add-iam-policy-binding true-sprite-459511-f5 \ --member="serviceAccount:89040534681-compute@developer.gserviceaccount.com" \ --role="roles/artifactregistry.writer"
  257  gcloud projects add-iam-policy-binding true-sprite-459511-f5 --member="serviceAccount:89040534681-compute@developer.gserviceaccount.com" --role="roles/artifactregistry.writer"
  258  kubectl get service iris-service
  259  kubectl get services
  260  kubectl get pods
  261  kubectl describe service iris-service
  262  kubectl logs iris-deployment-67c84bd87c-6nsw4
  263  kubectl describe pod iris-deployment-8646f444fd-tcwb2
  264  git pull origin main
  265  git pull -u origin main
  266  ls
  267  cd iris-project
  268  git pull origin main
  269  kubectl apply -f k8s/deployment.yaml
  270  git pull origin main
  271  kubectl apply -f k8s/deployment.yaml
  272  gcloud compute regions describe us-central1
  273  kubectl delete deployment iris-deployment
  274  kubectl get services
  275  kubectl delete deployment iris-service
  276  kubectl get pods
  277  kubectl apply -f k8s/deployment.yaml
  278  kubectl get pods --watch
  279  git pull origin main
  280  kubectl get pods --watch
  281  kubectl describe pod iris-deployment-759cd6c78f-gm2xx
  282  kubectl get pods --watch
  283  kubectl delete deployment week6-iris-workload
  284  kubectl delete service week6-iris-workload-service
  285  kubectl get all
  286  kubectl delete hpa week6-iris-workload-hpa-fn5b
  287  kubectl describe pod iris-deployment-759cd6c78f-gm2xx
  288  kubectl get pods --watch
  289  git pull origin main
  290  kubectl get pods --watch
  291  kubectl service
  292  kubectl get service
  293  kubectl delete service iris-service
  294  kubectl delete deployment iris-deployment
  295  kubectl get all
  296  gcloud container clusters list
  297  gcloud container clusters delete week6-iris-gke-cluster
  298  gcloud container clusters delete week6-iris-gke-cluster --zone=us-central1-a
  299  gcloud container clusters delete week6-iris-gke-cluster --zone=us-central1
  300  cd ~
  301  ls
  302  mkdir -p iris-observable-project/app
  303  mkdir -p iris-observable-project/k8s
  304  cd iris-observable-project
  305  ls
  306  nano pyproject.toml
  307  ls
  308  nano app/main.py
  309  cd ..
  310  ls
  311  cd iris-project
  312  ls
  313  cd fast_iris
  314  ls
  315  cd ~
  316  ls
  317  cd iris-observable-project
  318  ls
  319  cp ../iris-project/fast_iris/model.joblib app/
  320  ls
  321  cd app
  322  ls
  323  cd ..
  324  nano Dockerfile
  325  gcloud iam service-accounts create telemetry-access
  326  export PROJECT_ID=$(gcloud config get-value project)
  327  gcloud projects add-iam-policy-binding $PROJECT_ID   --member="serviceAccount:telemetry-access@$PROJECT_ID.iam.gserviceaccount.com"   --role="roles/logging.logWriter"
  328  gcloud projects add-iam-policy-binding $PROJECT_ID   --member="serviceAccount:telemetry-access@$PROJECT_ID.iam.gserviceaccount.com"   --role="roles/cloudtrace.agent"
  329  gcloud iam service-accounts add-iam-policy-binding   telemetry-access@$PROJECT_ID.iam.gserviceaccount.com   --role roles/iam.workloadIdentityUser   --member "serviceAccount:$PROJECT_ID.svc.id.goog[default/telemetry-access]"
  330  export IMAGE_NAME="iris-observable-api"
  331  export IMAGE_TAG="latest"
  332  export IMAGE_PATH="us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE_NAME:$IMAGE_TAG"
  333  docker build -t $IMAGE_PATH .
  334  cd iris-observable-project
  335  nano pyproject.toml
  336  poetry lock --no-update
  337  docker build -t $IMAGE_PATH .
  338  export IMAGE_NAME="iris-observable-api"
  339  export IMAGE_TAG="latest"
  340  export IMAGE_PATH="us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/$IMAGE_NAME:$IMAGE_TAG"
  341  docker build -t $IMAGE_PATH .
  342  export PROJECT_ID=$(gcloud config get-value project)
  343  export IMAGE_PATH="us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/iris-observable-api:latest"
  344  echo $IMAGE_PATH
  345  poetry lock
  346  vim pyproject.toml
  347  nano pyproject.toml
  348  poetry lock
  349  export PROJECT_ID=$(gcloud config get-value project)
  350  export IMAGE_PATH="us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/iris-observable-api:latest"
  351  docker build -t $IMAGE_PATH .
  352  nano k8s/deployment.yaml
  353  nano k8s/service.yaml
  354  nano k8s/hpa.yaml
  355  sed -i "s|__IMAGE_PATH_AND_TAG__|${IMAGE_PATH}|g" k8s/deployment.yaml
  356  gcloud container clusters get-credentials $CLUSTER_NAME --zone=$GCP_ZONE
  357  export CLUSTER_NAME="iris-scaling-cluster"
  358  export GCP_ZONE="us-central1-a"
  359  gcloud container clusters get-credentials $CLUSTER_NAME --zone=$GCP_ZONE
  360  kubectl create serviceaccount telemetry-access
  361  kubectl annotate serviceaccount telemetry-access   iam.gke.io/gcp-service-account=telemetry-access@$PROJECT_ID.iam.gserviceaccount.com
  362  kubectl apply -f k8s/deployment.yaml
  363  kubectl apply -f k8s/service.yaml
  364  kubectl apply -f k8s/hpa.yaml
  365  kubectl get service iris-observable-service
  366  export EXTERNAL_IP=$(kubectl get service iris-observable-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  367  curl -X POST "http://$EXTERNAL_IP/predict"   -H "Content-Type: application/json"   -d '{
    "sepal_length": 5.1,
    "sepal_width": 3.5,
    "petal_length": 1.4,
    "petal_width": 0.2
  }'
  368  kubectl get pods -l app=iris-observable-api
  369  kubectl describe service iris-observable-service
  370  kubectl describe pod iris-observable-deployment-585fbf6859-ms8s9
  371  export PROJECT_ID=$(gcloud config get-value project)
  372  export IMAGE_PATH="us-central1-docker.pkg.dev/$PROJECT_ID/my-repo/iris-observable-api:latest"
  373  docker build -t $IMAGE_PATH .
  374  docker push $IMAGE_PATH
  375  kubectl delete deployment iris-observable-deployment
  376  kubectl apply -f k8s/deployment.yaml
  377  kubectl get pods --watch
  378  kubectl describe service iris-observable-service
  379  kubectl get service iris-observable-service
  380  sudo apt-get update && sudo apt-get install -y wrk
  381  nano post.lua
  382  wrk -t4 -c100 -d30s --latency -s post.lua http://34.55.215.228/predict
  383  sudo sed -i '/bullseye-backports/d' /etc/apt/sources.list /etc/apt/sources.list.d/*.list
  384  sudo apt-get update
  385  sudo apt-get install -y wrk
  386  wrk -t4 -c100 -d30s --latency -s post.lua http://34.55.215.228/predict
  387  resource.labels.container_name="app-container"
  388  kubectl get pods -l app=iris-observable-api
  389  kubectl logs <pod-name>
  390  kubectl logs iris-observable-deployment-585fbf6859-ppnsh
  391  kubectl describe sa telemetry-access
  392  kubectl get pods -l app=iris-observable-api
  393  wrk -t4 -c100 -d30s --latency -s post.lua http://34.55.215.228/predict
  394  # Check cluster logging configuration
  395  gcloud container clusters describe $CLUSTER_NAME --zone=$GCP_ZONE --format="value(loggingService)"
  396  # Should show something like "logging.googleapis.com/kubernetes"
  397  gcloud container clusters describe $CLUSTER_NAME --zone=$GCP_ZONE --format="value(loggingService)"
  398  kubectl logs iris-observable-deployment-585fbf6859-ppnsh
  399  gcloud container clusters describe $CLUSTER_NAME --zone=$GCP_ZONE --format="value(loggingConfig.componentConfig)"
  400  gcloud projects get-iam-policy $(gcloud config get-value project) --flatten="bindings[].members" --format="table(bindings.role)" --filter="bindings.members:*$(gcloud config get-value project)*"
  401  gcloud projects get-iam-policy $(gcloud config get-value project) --flatten="bindings[].members" --format="table(bindings.role)" --filter="bindings.members:$(gcloud config get-value project)"
  402  kubectl get pods -n kube-system | grep logging
  403  kubectl get pods -n kube-system | grep fluent
  404  kubectl get pods -n gke-system | grep logging
  405  kubectl get events --sort-by='.lastTimestamp' | grep -i error
  406  export PROJECT_NUMBER=$(gcloud projects describe $(gcloud config get-value project) --format='value(projectNumber)')
  407  export GCE_SERVICE_ACCOUNT="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
  408  gcloud projects get-iam-policy $(gcloud config get-value project)   --flatten="bindings[].members"   --format='table(bindings.role)'   --filter="bindings.members:serviceAccount:${GCE_SERVICE_ACCOUNT}"
  409  export PROJECT_NUMBER=$(gcloud projects describe $(gcloud config get-value project) --format='value(projectNumber)')
  410  export GCE_SERVICE_ACCOUNT="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
  411  gcloud projects add-iam-policy-binding $(gcloud config get-value project)     --member="serviceAccount:${GCE_SERVICE_ACCOUNT}"     --role="roles/logging.logWriter"
  412  kubectl get pods -l app=iris-observable-api
  413  nano deployment.yaml
  414  ls
  415  cd k8s
  416  ls
  417  cd deployment.yaml
  418  nano deployment.yaml
  419  cd ..
  420* 
  421  kubectl get pods -l app=iris-observable-api
  422  kubectl logs iris-observable-deployment-585fbf6859-ppnsh > logs_iris-observable-deployment-585fbf6859-ppnsh.txt
  423  kubectl logs iris-observable-deployment-585fbf6859-x6vdh > log_iris-observable-deployment-585fbf6859-x6vdh.txt
  424  ls
  425  wrk -t4 -c100 -d30s --latency -s post.lua http://34.55.215.228/predict > wrk_results.txt
  426  ls
  427  git init
  428  git add .
  429  git commit -m "Initial commit of observable ML pipeline"
  430  git remote add origin https://github.com/adhithyasash1/observable-k8s-pipeline.git
  431  git push -u origin main
  432  git push -u origin
  433  git push -u origin master
  434  history > command_history.txt
